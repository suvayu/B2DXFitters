/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef MISTAGDISTRIBUTION
#define MISTAGDISTRIBUTION

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

/** @class MistagDistribution
 *
 * @author Manuel Schiller
 * @date 2012-06-26
 *
 * models typical mistag distributions
 *
 * parameters:
 *
 * w	per event mistag
 *
 * w0	turnon point in mistag (pdf = 0 for w < w0)
 * wa	average mistag of distribution
 * f	value of mistag pdf at w = 0.5 (the pdf peak value is 1.0)
 *
 * here's the functional form:
 *
 *                / ((w-w0)/(wc-w0))^2		for w0 < w < wc
 * PDF(w) = 1/N * | 1 - (1-f) * (w-wc)/(1/2-wc)	for wc < w < 0.5
 *                \ 0				elsewhere
 *
 * in the formula above, wc is calculated such that the average
 * mistag wa comes out right; the analytical formula for wc is given
 * in the code, but there is no solution which is guaranteed with all
 * sets of parameters w0, wa, f (or, to put it another way, the shape
 * of the PDF cannot accomodate all possible choices for the average
 * mistag)
 *
 * if any of the parameters are out of range, or wc cannot be calculated
 * such that the distribution has the desired mean, the pdf will return
 * 0 for all choices of w
 */
class MistagDistribution : public RooAbsPdf {
    public:
	MistagDistribution() {} ; 
	MistagDistribution(const char *name, const char *title,
		RooAbsReal& _w,
		RooAbsReal& _w0,
		RooAbsReal& _wa,
		RooAbsReal& _f);
	MistagDistribution(const MistagDistribution& other, const char* name=0) ;
	virtual TObject* clone(const char* newname) const { return new MistagDistribution(*this,newname); }
	virtual ~MistagDistribution();

	virtual Int_t getAnalyticalIntegral(RooArgSet& integ, RooArgSet& anaIntSet, const char* rangeName = 0) const;
	virtual Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const;

    protected:

	RooRealProxy w;
	RooRealProxy w0;
	RooRealProxy wa;
	RooRealProxy f;

	Double_t evaluate() const ;

    private:
	mutable double lastw0, lastwa, lastf, lastwc;

	double getWc() const;

	ClassDef(MistagDistribution,1) // Your description goes here...
};

#endif
