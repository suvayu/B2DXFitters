/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

// ROOT and RooFit includes
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h"

// B2DXFitters includes
#include "B2DXFitters/DTAcceptanceLHCbNote2007041.h"

//ClassImp(DTAcceptanceLHCbNote2007041) 


 DTAcceptanceLHCbNote2007041::DTAcceptanceLHCbNote2007041(const char *name, const char *title, 
                        RooAbsReal& _t,
                        RooAbsReal& _s_low,
                        RooAbsReal& _s_high,
                        RooAbsReal& _n,
                        RooAbsReal& _limit) :
   RooAbsReal(name,title), 
   t("t","t",this,_t),
   s_low("s_low","s_low",this,_s_low),
   s_high("s_high","s_high",this,_s_high),
   n("n","n",this,_n),
   limit("limit","limit",this,_limit)
 { 
 } 


 DTAcceptanceLHCbNote2007041::DTAcceptanceLHCbNote2007041(const DTAcceptanceLHCbNote2007041& other, const char* name) :  
   RooAbsReal(other,name), 
   t("t",this,other.t),
   s_low("s_low",this,other.s_low),
   s_high("s_high",this,other.s_high),
   n("n",this,other.n),
   limit("limit",this,other.limit)
 { 
 } 



 Double_t DTAcceptanceLHCbNote2007041::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE
   // ( (s_low * t)**(n) ) / ( 1 + (s_low * t)**(n) ) * ( 1 + s_high * t )
   if ( t < 0 )
   {
     return 0;
   }
   else if ( t < limit )
   {
     double arg  = s_low*t;
     double arg2 = s_high*t;
     return ( pow(arg,n) / (1+pow(arg,n)))*(1+arg2);
   }
   else
   {
     return 0;
   }
 }
